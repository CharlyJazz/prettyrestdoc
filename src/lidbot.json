{
  "openapi" : "3.0.0",
  "info" : {
    "description" : "The Lidbot API is organized around REST. Our API has predictable resource-oriented URLs, accepts form-encoded request bodies, returns JSON-encoded responses, and uses standard HTTP response codes, authentication, and verbs.",
    "title" : "Lidbot API",
    "version" : "2.0.0",
    "termsOfService" : "https://lidbot.com/terms/",
    "contact" : {
      "email" : "support@lidbot.com"
    }
  },
  "servers" : [ {
    "url" : "https://api.lidbot.com/v1",
    "description" : "API Keys protected Lidbot API"
  }, {
    "url" : "https://api.lidbot.com/internal",
    "description" : "OAuth 2.0 protected Lidbot API"
  } ],
  "tags" : [ {
    "name" : "sensors",
    "description" : "This is a sensor related operation"
  }, {
    "name" : "reports",
    "description" : "Sensor reports"
  }, {
    "name" : "account",
    "description" : "Account related operation"
  }, {
    "name" : "bin_types",
    "description" : "Bin types"
  }, {
    "name" : "event_configuration",
    "description" : "Event configuration"
  }, {
    "name" : "users",
    "description" : "Users"
  } ],
  "paths" : {
    "/account" : {
      "get" : {
        "summary" : "Retrieve the account object",
        "operationId" : "getAccount",
        "tags" : [ "account" ],
        "roles" : [ "user", "admin", "owner" ],
        "responses" : {
          "200" : {
            "description" : "Returns the account object.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Account"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      }
    },
    "/account/bin-types" : {
      "get" : {
        "summary" : "Retrieve the bin types",
        "tags" : [ "bin_types" ],
        "roles" : [ "user", "admin", "owner" ],
        "responses" : {
          "200" : {
            "description" : "Returns the bin types.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/BinType"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "summary" : "Create a new bin type",
        "tags" : [ "bin_types" ],
        "roles" : [ "admin", "owner" ],
        "description" : "Create a new bin type",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BinType"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Returns the created bin type.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BinType"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      }
    },
    "/sensors" : {
      "get" : {
        "summary" : "Retrieves a list of sensors.",
        "parameters" : [ {
          "$ref" : "#/components/parameters/limit"
        }, {
          "$ref" : "#/components/parameters/sort_field"
        }, {
          "$ref" : "#/components/parameters/sort_order"
        }, {
          "$ref" : "#/components/parameters/starting_after"
        } ],
        "tags" : [ "sensors" ],
        "roles" : [ "user", "admin", "owner" ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of sensors. By default, sorted in ascending) order by created_on. Sensors will have the pinned flag set to true will appear at the beginning of the returned list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorList"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "summary" : "Create a new sensor",
        "tags" : [ "sensors" ],
        "roles" : [ "admin", "owner" ],
        "description" : "Create a new sensor",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SensorRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "The sensor has been created.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      }
    },
    "/sensors/{sensor_id}" : {
      "get" : {
        "summary" : "Retrieves a sensor",
        "tags" : [ "sensors" ],
        "roles" : [ "user", "admin", "owner" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/sensor_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Sensor object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "summary" : "Deletes a sensor",
        "tags" : [ "sensors" ],
        "description" : "Delete the sensor",
        "roles" : [ "admin", "owner" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/sensor_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Deleted sensor object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "summary" : "Update a sensor",
        "tags" : [ "sensors" ],
        "roles" : [ "admin", "owner" ],
        "description" : "Update the existing sensor",
        "parameters" : [ {
          "$ref" : "#/components/parameters/sensor_id"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SensorRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Updated sensor object",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SensorResponse"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      }
    },
    "/sensors/{sensor_id}/reports" : {
      "get" : {
        "summary" : "Retrieves reports from a sensors",
        "tags" : [ "reports" ],
        "roles" : [ "user", "admin", "owner" ],
        "parameters" : [ {
          "$ref" : "#/components/parameters/sensor_id"
        } ],
        "responses" : {
          "200" : {
            "description" : "Return a list of reports",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportList"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      }
    },
    "/users" : {
      "get" : {
        "summary" : "Retrieves users",
        "parameters" : [ {
          "$ref" : "#/components/parameters/limit"
        } ],
        "tags" : [ "users" ],
        "roles" : [ "user", "admin", "owner" ],
        "responses" : {
          "200" : {
            "description" : "Returns a list of users.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UserList"
                }
              }
            }
          }
        },
        "security" : [ {
          "password" : [ ]
        }, {
          "api_key" : [ ]
        } ]
      }
    }
  },
  "components" : {
    "schemas" : {
      "SensorScheduleDay" : {
        "type" : "object",
        "title" : "Day of week schedule",
        "description" : "Defines sensor schedule for a single day of week",
        "properties" : {
          "day" : {
            "type" : "string",
            "description" : "A day of week",
            "enum" : [ "SUNDAY", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY" ],
            "example" : "MONDAY"
          },
          "times" : {
            "type" : "array",
            "description" : "Times in the day when the sensor makes measurments",
            "minItems" : 1,
            "maxItems" : 240,
            "uniqueItems" : true,
            "items" : {
              "type" : "string",
              "description" : "Individual time entry",
              "minLength" : 5,
              "maxLength" : 5,
              "pattern" : "^([01][0-9]|2[0-3]):([0-5][0-9])$",
              "example" : "10:30"
            }
          }
        },
        "required" : [ "day", "times" ]
      },
      "SensorSchedule" : {
        "type" : "object",
        "description" : "Defines sensor schedule",
        "nullable" : true,
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "WEEKLY schedule type follow times defined in the week array. RATE schedule type instructs sensors to wake up every rate number of seconds",
            "enum" : [ "RATE", "WEEKLY" ],
            "example" : "WEEKLY"
          },
          "week" : {
            "type" : "array",
            "description" : "An list of objects containing the times when sensors wake up.",
            "minItems" : 1,
            "maxItems" : 7,
            "items" : {
              "$ref" : "#/components/schemas/SensorScheduleDay"
            }
          },
          "rate" : {
            "type" : "number",
            "description" : "A value in seconds to determine the wake up interval of sensors",
            "example" : 3600,
            "minimum" : 300,
            "maximum" : 2592000
          }
        },
        "required" : [ "type", "oneOf - week - rate" ]
      },
      "Subscriber" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "An email address of the event subscriber.",
            "example" : "john@lidbot.com"
          },
          "email_enabled" : {
            "type" : "boolean",
            "description" : "Determines if the email address should be used to send notifications.",
            "example" : true
          },
          "phone_enabled" : {
            "type" : "boolean",
            "description" : "Determines if the phone number should be used to send notifications.",
            "example" : false
          }
        },
        "required" : [ "email", "email_enabled", "phone_enabled" ]
      },
      "EventCondition" : {
        "type" : "object",
        "description" : "Determines when an event of the given type is created.",
        "properties" : {
          "value" : {
            "type" : "integer",
            "description" : "Depending on the event type events.condition.value is compared with different field in the sensor object. For: Notifications_BinChanged, Notifications_BinFull, Notifications_MissedPickup, Notifications_BinEmpty events.condition.value is compared against sensor.fill_percentage. For Notifications_LowBatteryLevel events.condition.value is compared against sensor.battery.",
            "example" : 80
          },
          "operator" : {
            "type" : "string",
            "description" : "GE - greater than or equal, LE- less than or equal, LT- less than, GT- greater than, EQ - equal",
            "enum" : [ "GE", "LE", "LT", "GT", "EQ" ],
            "example" : "GE"
          }
        },
        "required" : [ "value", "operator" ]
      },
      "Notification" : {
        "type" : "object",
        "description" : "Specifies notifications configuration in case the event is triggered",
        "properties" : {
          "enabled" : {
            "type" : "boolean",
            "description" : "Specifies whether notifications are enabled or disabled.",
            "example" : true
          },
          "subscribers" : {
            "type" : "array",
            "description" : "A list of subscribers to the event",
            "minItems" : 0,
            "maxItems" : 100,
            "uniqueItems" : true,
            "items" : {
              "$ref" : "#/components/schemas/Subscriber"
            }
          }
        },
        "required" : [ "enabled", "subscribers" ]
      },
      "EventConfiguration" : {
        "type" : "object",
        "description" : "Defines settings for when an event is triggered and who gets notified",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Event type",
            "enum" : [ "Notifications_BinChanged", "Notifications_MissedPickup", "Notifications_LowBatteryLevel", "Notifications_BinEmpty", "Notifications_BinFull" ]
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "Determines whether the event will be created in the system. If enabled=falsethe event won’t be created even if the event conditions are met.",
            "example" : false
          },
          "condition" : {
            "$ref" : "#/components/schemas/EventCondition"
          },
          "notification" : {
            "$ref" : "#/components/schemas/Notification"
          }
        },
        "required" : [ "type", "enabled", "condition" ]
      },
      "AccountOptions" : {
        "type" : "object",
        "description" : "Account options",
        "properties" : {
          "map_enabled" : {
            "type" : "boolean",
            "description" : "Determines if the map functionality is enabled.",
            "example" : true
          }
        }
      },
      "Locale" : {
        "type" : "object",
        "description" : "Locale settings for the account",
        "properties" : {
          "timezone" : {
            "type" : "string",
            "description" : "The timezone this account operated in.",
            "example" : "America/New York"
          },
          "language" : {
            "type" : "array",
            "description" : "Main language used across the account",
            "items" : {
              "type" : "string",
              "enum" : [ "en-US" ],
              "example" : "en-US"
            }
          }
        },
        "required" : [ "timezone", "language" ]
      },
      "Account" : {
        "type" : "object",
        "properties" : {
          "customer_id" : {
            "type" : "string",
            "description" : "Unique identifier of the customer object.",
            "readOnly" : true,
            "example" : "8559880a-a847-43b5-a791-dac7d5fda683"
          },
          "parent_id" : {
            "type" : "string",
            "description" : "Indentifier of the account that the current account belongs to.",
            "readOnly" : true,
            "example" : "8559880a-a847-43b5-a791-dac7d5fda123"
          },
          "sub_accounts" : {
            "type" : "array",
            "minItems" : 0,
            "maxItems" : 100,
            "items" : {
              "type" : "string",
              "description" : "Indentifier of the account that is managed by the current account.",
              "readOnly" : true,
              "example" : "8559880a-a847-43b5-a791-dac7d5fda777"
            }
          },
          "account_name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 256,
            "description" : "Account name",
            "example" : "Lidbot"
          },
          "locale" : {
            "$ref" : "#/components/schemas/Locale"
          },
          "sensor_schedule" : {
            "$ref" : "#/components/schemas/SensorSchedule"
          },
          "bin_types" : {
            "type" : "array",
            "minItems" : 0,
            "maxItems" : 50,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/BinType"
            }
          },
          "events" : {
            "type" : "array",
            "minItems" : 0,
            "maxItems" : 5,
            "readOnly" : true,
            "items" : {
              "$ref" : "#/components/schemas/EventConfiguration"
            }
          },
          "options" : {
            "$ref" : "#/components/schemas/AccountOptions"
          }
        },
        "required" : [ "customer_id", "account_name", "locale" ]
      },
      "List" : {
        "type" : "object",
        "properties" : {
          "object" : {
            "type" : "string",
            "description" : "Returned object type",
            "example" : "list"
          },
          "has_more" : {
            "type" : "boolean",
            "description" : "Indicates whether there are more items in the database",
            "example" : false
          },
          "last_element" : {
            "type" : "string",
            "description" : "Provide this value in the starting_after parameter to get the next list of sensors.",
            "example" : "eyJjdXN0b21lcl9pZCI6ImxpZGJvdC1zYW5kYm94LS10ZXN0Iiwic2Vuc29yX2lkIjoiMzFiMmFmYjItOGM3OS00ZTgzLWJlOWQtNDc1MWNkY2RhMzk0IiwiZmlsbF9wZXJjZW50YWdlIjozOH0"
          }
        },
        "required" : [ "object", "has_more" ]
      },
      "ReportList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/List"
        } ],
        "type" : "object",
        "description" : "A wrapper object containing a list of reports",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Url to the resource",
            "example" : "/sensors/lidbot-001/reports"
          },
          "data" : {
            "type" : "array",
            "description" : "A list of objects",
            "minItems" : 0,
            "maxItems" : 10000,
            "items" : {
              "$ref" : "#/components/schemas/ReportResponse"
            }
          }
        },
        "required" : [ "url", "data" ]
      },
      "SensorList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/List"
        } ],
        "type" : "object",
        "description" : "A wrapper object containing a list of sensors",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Url to the resource",
            "example" : "/sensors"
          },
          "data" : {
            "type" : "array",
            "description" : "A list of objects",
            "items" : {
              "$ref" : "#/components/schemas/SensorResponse"
            }
          }
        },
        "required" : [ "url", "data" ]
      },
      "UserList" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/List"
        } ],
        "type" : "object",
        "description" : "A wrapper object containing a list of users",
        "properties" : {
          "url" : {
            "type" : "string",
            "description" : "Url to the resource",
            "example" : "/users"
          },
          "data" : {
            "type" : "array",
            "description" : "A list of users",
            "items" : {
              "$ref" : "#/components/schemas/User"
            }
          }
        },
        "required" : [ "url", "data" ]
      },
      "Model" : {
        "type" : "object",
        "properties" : {
          "created_on" : {
            "type" : "integer",
            "description" : "Unix timestamp of the object created time",
            "example" : 1585796508
          },
          "updated_on" : {
            "type" : "integer",
            "description" : "Unix timestamp of the object updation",
            "example" : 1585796508
          }
        },
        "required" : [ "created_on" ]
      },
      "SensorRequest" : {
        "type" : "object",
        "required" : [ "bin_type" ],
        "properties" : {
          "bin_type" : {
            "type" : "string",
            "description" : "Enter identifier of an existing bin type. The system will retrieve the bin type and copy it to the sensor object.",
            "example" : "8559880a-a847-43b5-a791-dac7d5fda683"
          },
          "nickname" : {
            "type" : "string",
            "maxLength" : 256,
            "description" : "Sensor nickname",
            "example" : "1st floor next to 7-11"
          },
          "container_id" : {
            "type" : "string",
            "maxLength" : 256,
            "description" : "Indentifier of an external container (eg. The reference number of the trash bin the sensor is installed in.) It’s used to link Lidbot sensors with customers' bins.",
            "example" : "18014398757074127"
          },
          "pinned" : {
            "type" : "boolean",
            "description" : "Sensor with the pinned flag set to true will appear first in the GET:/sensors API call. Those sensors will be sorted according to the sort parameters.",
            "default" : false,
            "example" : true
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          }
        }
      },
      "SensorResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Model"
        } ],
        "type" : "object",
        "properties" : {
          "sensor_id" : {
            "type" : "string",
            "description" : "Unique indentifier of the sensor",
            "example" : "8559880a-a847-43b5-a791-dac7d5fda683"
          },
          "nickname" : {
            "type" : "string",
            "maxLength" : 256,
            "description" : "Sensor nickanme",
            "example" : "1st floor next to 7-11"
          },
          "container_id" : {
            "type" : "string",
            "maxLength" : 256,
            "description" : "ID of the container the sensor is installed in",
            "example" : "18014398757074127"
          },
          "pinned" : {
            "type" : "boolean",
            "description" : "Sensor with the pinned flag set to true will appear first in the GET:/sensors API call. Those sensors will be sorted according to the sort parameters.",
            "example" : true
          },
          "location" : {
            "$ref" : "#/components/schemas/Location"
          },
          "signal" : {
            "type" : "integer",
            "description" : "Sinnal quality",
            "minimum" : 0,
            "maximum" : 31,
            "example" : 30
          },
          "battery" : {
            "type" : "integer",
            "description" : "Battery level",
            "minimum" : 0,
            "maximum" : 100,
            "example" : 85
          },
          "fill_percentage" : {
            "type" : "integer",
            "description" : "The fill level of the container the sensor is installed in",
            "minimum" : 0,
            "maximum" : 100,
            "example" : 50
          },
          "next_report" : {
            "type" : "integer",
            "description" : "Unix timestamp when the sensor is supposed to send a new report",
            "example" : 1585796508
          },
          "last_connected_on" : {
            "type" : "integer",
            "description" : "A timestamp of the last connection time. This timestamp is the same as the latest report created_on timestamp.",
            "example" : 1585797508
          },
          "state" : {
            "type" : "string",
            "description" : "Sensor state.",
            "enum" : [ "NEW", "CONNECTED" ]
          },
          "bin_type" : {
            "$ref" : "#/components/schemas/BinType"
          }
        }
      },
      "ReportResponse" : {
        "allOf" : [ {
          "$ref" : "#/components/schemas/Model"
        } ],
        "type" : "object",
        "properties" : {
          "sensor_id" : {
            "type" : "string",
            "example" : "35e602c8-8617-4431-8410-dec7dc14b087"
          },
          "bin_level" : {
            "type" : "number",
            "description" : "Distance in millimeters between the sensor and the bottom of the bin or the top of trash",
            "example" : 345
          },
          "battery" : {
            "type" : "number",
            "description" : "Battery level",
            "minimum" : 0,
            "maximum" : 100,
            "example" : 50
          },
          "signal" : {
            "type" : "number",
            "minimum" : 0,
            "maximum" : 31,
            "description" : "Signal quality",
            "example" : 23
          },
          "fill_percentage" : {
            "type" : "number",
            "minimum" : 0,
            "maximum" : 100,
            "description" : "Fill percentange",
            "example" : 78
          }
        }
      },
      "BinType" : {
        "type" : "object",
        "required" : [ "name", "max_distance" ],
        "properties" : {
          "bin_type_id" : {
            "type" : "string",
            "readOnly" : true,
            "description" : "Generated bin indentifier",
            "example" : "35e602c8-8617-4431-8410-dec7dc14b087"
          },
          "name" : {
            "type" : "string",
            "description" : "Bin type name",
            "example" : "Recycle XXL"
          },
          "min_distance" : {
            "type" : "integer",
            "minimum" : 0,
            "maximum" : 3999,
            "description" : "When the sensor measures this distance in millimeters (mm) it means the fill_percentage is 100%.",
            "example" : 0
          },
          "max_distance" : {
            "type" : "integer",
            "minimum" : 1,
            "maximum" : 4000,
            "description" : "When the sensor measures this distance in millimeters (mm) it means the fill_percentage is 0%.",
            "example" : 1000
          },
          "volume" : {
            "type" : "integer",
            "minimum" : 1,
            "description" : "Bin volume in liters.",
            "example" : 100
          },
          "waste_type" : {
            "type" : "string",
            "description" : "The type of waste the bin type contains.",
            "enum" : [ "PAPER", "MIXED", "EWASTE", "LIQUID", "METALS", "HAZARDOUS", "RECYCLABLE", "ORGANIC", "PLASTIC", "GLASS" ]
          }
        }
      },
      "Location" : {
        "type" : "object",
        "properties" : {
          "coordinates" : {
            "$ref" : "#/components/schemas/Coordinates"
          }
        }
      },
      "Coordinates" : {
        "type" : "object",
        "description" : "Geographical coordinates of the sensor's location",
        "properties" : {
          "latitude" : {
            "type" : "number",
            "minimum" : -90,
            "maximum" : 90,
            "description" : "Latitude",
            "example" : 15.04776
          },
          "longitude" : {
            "type" : "number",
            "minimum" : -180,
            "maximum" : 180,
            "description" : "Longitude",
            "example" : 121.53185
          }
        }
      },
      "User" : {
        "type" : "object",
        "description" : "User object",
        "properties" : {
          "given_name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 256,
            "description" : "A user's given name",
            "example" : "John"
          },
          "family_name" : {
            "type" : "string",
            "minLength" : 1,
            "maxLength" : 256,
            "description" : "A user's last/family name",
            "example" : "Smith"
          },
          "email" : {
            "type" : "string",
            "description" : "User's email address",
            "example" : "john@lidbot.com"
          },
          "email_verified" : {
            "type" : "boolean",
            "readOnly" : true,
            "description" : "A flag indicating whether the user verifided her email",
            "exaple" : true
          },
          "phone_number" : {
            "type" : "string",
            "description" : "User's phone number",
            "example" : 44123456789
          },
          "phone_number_verified" : {
            "type" : "boolean",
            "readOnly" : true,
            "description" : "A flag indicating whether the user verifided her phone number",
            "example" : false
          },
          "user_status" : {
            "type" : "string",
            "readOnly" : true,
            "description" : "User's status",
            "enum" : [ "CONFIRMED", "PENDING_INVITATION", "PASSWORD_RESET_REQUIRED" ]
          },
          "enabled" : {
            "type" : "boolean",
            "description" : "A flag indicating whether the user account is enabled",
            "example" : true
          },
          "language" : {
            "type" : "string",
            "description" : "A language set by the user",
            "enum" : [ "en-US" ],
            "example" : "en-US"
          },
          "user_role" : {
            "type" : "string",
            "example" : "ADMIN",
            "description" : "User's role in the system. With different roles comes different privilleges.",
            "enum" : [ "ACCOUNT_OWNER", "DEVELOPER", "ADMIN", "USER" ]
          }
        }
      }
    },
    "responses" : {
      "400ApiError" : {
        "description" : "request invalid, validate usage and try again",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "statusCode" : {
                  "type" : "string",
                  "example" : "400"
                },
                "code" : {
                  "type" : "string",
                  "example" : "UsernameExistsException"
                },
                "message" : {
                  "type" : "string",
                  "example" : "This user already exists in a different account"
                }
              }
            }
          }
        }
      },
      "401ApiError" : {
        "description" : "request not authenticated, API token is missing, invalid or expired",
        "headers" : {
          "www-authenticate" : {
            "style" : "simple",
            "explode" : false,
            "schema" : {
              "type" : "string",
              "example" : "Bearer scope=\"\" error=\"invalid_token\" error_description=\"the token has expired\""
            }
          }
        },
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string",
                  "example" : "Unauthorized"
                }
              }
            }
          }
        }
      },
      "403ApiError" : {
        "description" : "request not authorized, provided credentials do not provide access to specified resource",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "statusCode" : {
                  "type" : "string",
                  "example" : "403"
                },
                "code" : {
                  "type" : "string",
                  "example" : "Forbidden"
                },
                "message" : {
                  "type" : "string",
                  "example" : "You don't have permission to access sensor with sensor_id: lidbot-001"
                }
              }
            }
          }
        }
      },
      "404ApiError" : {
        "description" : "request failed, the specified resource does not exist",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "statusCode" : {
                  "type" : "string",
                  "example" : "404"
                },
                "code" : {
                  "type" : "string",
                  "example" : "Not found"
                },
                "message" : {
                  "type" : "string",
                  "example" : "Resource not found"
                }
              }
            }
          }
        }
      },
      "500ApiError" : {
        "description" : "Error occurred, we are notified, but contact support if the issue persists",
        "content" : {
          "application/json" : {
            "schema" : {
              "type" : "object",
              "properties" : {
                "statusCode" : {
                  "type" : "string",
                  "example" : "500"
                },
                "message" : {
                  "type" : "string",
                  "example" : "This is an error"
                }
              }
            }
          }
        }
      }
    },
    "parameters" : {
      "sensor_id" : {
        "name" : "sensor_id",
        "in" : "path",
        "required" : true,
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "example" : "lidbot-001"
        }
      },
      "email" : {
        "name" : "email",
        "in" : "path",
        "required" : true,
        "description" : "The email address of the user that needs to be fetched.",
        "style" : "simple",
        "explode" : false,
        "schema" : {
          "type" : "string",
          "example" : "john@lidbot.com"
        }
      },
      "limit" : {
        "name" : "limit",
        "in" : "query",
        "required" : false,
        "description" : "A limit on the number of objects to be returned. The limit can range between 1 and 100, and the default is 10.",
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "integer",
          "default" : 10
        }
      },
      "sort_field" : {
        "name" : "sort_field",
        "in" : "query",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "description" : "Defines sort field the list will be sorted by."
        }
      },
      "sort_order" : {
        "name" : "sort_order",
        "in" : "query",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "enum" : [ "asc", "desc" ],
          "description" : "Sort order"
        }
      },
      "starting_after" : {
        "name" : "starting_after",
        "in" : "query",
        "required" : false,
        "style" : "form",
        "explode" : true,
        "schema" : {
          "type" : "string",
          "description" : "A cursor for use in pagination. starting_after is a generated ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, including last_element in the data root, your subsequent call can include starting_after=last_element in order to fetch the next page of the list."
        }
      }
    },
    "securitySchemes" : {
      "api_key" : {
        "type" : "http",
        "description" : "The Lidbot API uses API keys to authenticate requests. You can view and manage your API keys in the Lidbot Dashboard. Your API keys carry many privileges, so be sure to keep them secure! Do not share your secret API keys in publicly accessible areas such as GitHub, client-side code, and so forth. Authentication to the API is performed via HTTP Basic Auth. Provide your API key as the basic auth username value. You do not need to provide a password. All API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.",
        "scheme" : "basic"
      },
      "password" : {
        "type" : "oauth2",
        "flows" : {
          "password" : {
            "tokenUrl" : "https://api.lidbot.com/internal/oauth/token"
          }
        }
      }
    }
  }
}